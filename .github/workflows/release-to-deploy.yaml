name: Release and Deploy from Prod

on:
  push:
    branches:
      - prod  # Trigger only on push to prod branch

jobs:
    # Step 1: Check if the version is a full release and if the tag already exists
  check-version-and-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install toml
        run: |
          python -m pip install toml  # Install toml to parse pyproject.toml

      - name: Get version from pyproject.toml
        id: version
        run: |
          VERSION=$(python -c "import toml; version = toml.load('pyproject.toml')['project'].get('version', ''); print(version)")
          if [ -z "$VERSION" ]; then
            echo "ERROR: Version not found in pyproject.toml"
            exit 1  # Fail the job if no version is found
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Validate version and check if tag exists
        run: |
          # Ensure the version does not end with 'dev' or 'rc'
          if [[ "${{ env.VERSION }}" =~ (dev|rc)$ ]]; then
            echo "Skipping release for version ${VERSION}. This is a pre-release version (dev/rc)."
            exit 0  # Skip release for dev/rc versions
          fi

          # Check if a tag already exists with this version
          TAG_EXISTS=$(git tag -l "v${{ env.VERSION }}")
          if [[ -n "$TAG_EXISTS" ]]; then
            echo "Tag v${{ env.VERSION }} already exists. Skipping release."
            exit 0  # Skip release if tag already exists
          fi

          echo "Version ${VERSION} is a valid release version and tag doesn't exist. Proceeding with release."

  # Step 2: Create a GitHub Release
  release:
    needs: check-version-and-tag
    if: success()  # Proceed if the version is valid and tag doesn't exist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "Release v${{ env.VERSION }}"
          body: "Release: v${{ env.VERSION }}"
          draft: false
          prerelease: false

  # Step 3: Deploy to PyPI if it's a valid release
  deploy:
    needs: release
    if: success()  # Proceed if release creation is successful
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
