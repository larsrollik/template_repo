name: Release and Deploy from Prod

on:
  push:
    branches:
      - prod  # Trigger only on push to prod branch

jobs:
  # Step 1: Check if the version is a full release and if the tag already exists
  check-version-and-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Install toml
        run: |
          python -m pip install toml  # Install toml to parse pyproject.toml

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "::set-output name=version::${VERSION}"  # Set version as an output

      - name: Validate version and check if tag exists
        run: |
          if [[ "${{ steps.get_version.outputs.version }}" =~ (dev|rc)$ ]]; then
            echo "Skipping release for version ${VERSION}. This is a pre-release version (dev/rc)."
            exit 0  # Skip release for dev/rc versions
          fi

          TAG_EXISTS=$(git tag -l "v${{ steps.get_version.outputs.version }}")
          if [[ -n "$TAG_EXISTS" ]]; then
            echo "Tag v${{ steps.get_version.outputs.version }} already exists. Skipping release."
            exit 0  # Skip release if tag exists
          fi

          echo "Version ${VERSION} is valid and tag doesn't exist. Proceeding with release."

#  print-version:
#    needs: check-version-and-tag
#    runs-on: ubuntu-latest
#    steps:
#      - name: Print version
#        run: |
#          echo "The version from pyproject.toml is: ${{ needs.check-version-and-tag.outputs.version }}"

  release:
    needs: check-version-and-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ needs.check-version-and-tag.outputs.version }}"
          release_name: "Release v${{ needs.check-version-and-tag.outputs.version }}"
          body: "Release: v${{ needs.check-version-and-tag.outputs.version }}"
          draft: false
          prerelease: false

  # Step 3: Deploy to PyPI if it's a valid release
  deploy:
    needs: release
    if: success()  # Proceed if release creation is successful
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
