name: CI

on:
  push:
    branches:
      - main
    tags:
      - "*"

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: Install pre-commit
        run: |
          pip install pre-commit
          pre-commit install
      - name: Run linters and pre-commit hooks
        run: |
          black ./ --check --verbose
          flake8 --verbose
          pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: Run tests with coverage
        run: |
          pytest --cov=templatepy --cov-report=term-missing --maxfail=5

  check-tag:
    needs: [lint, test]  # Both lint and test jobs need to pass before this runs
    runs-on: ubuntu-latest
    if: contains(github.ref, 'refs/tags') && (!contains(github.ref_name, 'dev')) && (!contains(github.ref_name, 'rc'))
    steps:
      - run: echo "Tag '${{ github.ref_name }}' is valid."

  release:
    needs: [check-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "${{ github.ref_name }}"
          body: "ðŸš€ Release: ${{ github.event.repository.name }} @ ${{ github.ref_name }}"
          draft: false
          prerelease: false

  deploy:
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine
          pip install build  # Install the build package
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          python -m build --wheel --sdist  # Use pyproject.toml build system
          twine upload dist/* --verbose
